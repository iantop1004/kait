# -*- coding: utf-8 -*-
"""kobert_0930_Trin80_Epoch60.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N3wuelzVTqwClytD3PPUOgVY7xxmgVw_
"""

# from google.colab import drive
# drive.mount('/content/drive')

# # Commented out IPython magic to ensure Python compatibility.
# # %cd /content/drive/MyDrive/kobert_0926

# !pwd

# !pip install mxnet
# !pip install gluonnlp pandas tqdm
# !pip install sentencepiece
# !pip install transformers==3.0.2
# !pip install torch

#깃허브에서 KoBERT 파일 로드
# !pip install git+https://git@github.com/SKTBrain/KoBERT.git@master

import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import gluonnlp as nlp
import numpy as np
from tqdm import tqdm, tqdm_notebook

#kobert
from kobert.utils import get_tokenizer
from kobert.pytorch_kobert import get_pytorch_kobert_model

#transformers
from transformers import AdamW
from transformers.optimization import get_cosine_schedule_with_warmup

#GPU 사용
# device = torch.device("cuda:0")

#BERT 모델, Vocabulary 불러오기
bertmodel, vocab = get_pytorch_kobert_model()

# import pandas as pd
# df = pd.read_csv('/content/drive/MyDrive/kobert_0926/test.csv', encoding='cp949')

# df.loc[(df['label'] == "상처"), 'label'] = 0  #상처 => 0
# df.loc[(df['label'] == "슬픔"), 'label'] = 1  #슬픔 => 1
# df.loc[(df['label'] == "분노"), 'label'] = 2  #분노 => 2
# df.loc[(df['label'] == "기쁨"), 'label'] = 3  #기쁨 => 3
# df.loc[(df['label'] == "불안"), 'label'] = 4  #불안 => 4
# df.loc[(df['label'] == "당황"), 'label'] = 5  #당황 => 5

# data_list = []
# for q, label in zip(df['document'], df['label'])  :
#     data = []
#     data.append(q)
#     data.append(str(label))

#     data_list.append(data)

# print(data_list[0])
# print(data_list[6000])
# print(data_list[12000])
# print(data_list[18000])
# print(data_list[24000])
# print(data_list[30000])
# print(data_list[-1])

# from sklearn.model_selection import train_test_split
                                                         
# dataset_train, dataset_test = train_test_split(data_list, test_size=0.20, random_state=0)

# print(len(dataset_train))
# print(len(dataset_test))

class BERTDataset(Dataset):
    def __init__(self, dataset, sent_idx, label_idx, bert_tokenizer, max_len,
                 pad, pair):
        transform = nlp.data.BERTSentenceTransform(
            bert_tokenizer, max_seq_length=max_len, pad=pad, pair=pair)

        self.sentences = [transform([i[sent_idx]]) for i in dataset]
        self.labels = [np.int32(i[label_idx]) for i in dataset]

    def __getitem__(self, i):
        return (self.sentences[i] + (self.labels[i], ))

    def __len__(self):
        return (len(self.labels))

# Setting parameters
max_len = 64
batch_size = 64
warmup_ratio = 0.1
num_epochs = 60
max_grad_norm = 1
log_interval = 200
learning_rate =  5e-5

#토큰화
tokenizer = get_tokenizer()
tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)

# data_train = BERTDataset(dataset_train, 0, 1, tok, max_len, True, False)
# data_test = BERTDataset(dataset_test, 0, 1, tok, max_len, True, False)

# train_dataloader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, num_workers=5)
# test_dataloader = torch.utils.data.DataLoader(data_test, batch_size=batch_size, num_workers=5)

# class BERTClassifier(nn.Module):
#     def __init__(self,
#                  bert,
#                  hidden_size = 768,
#                  num_classes=6,  
#                  dr_rate=None,
#                  params=None):
#         super(BERTClassifier, self).__init__()
#         self.bert = bert
#         self.dr_rate = dr_rate
                 
#         self.classifier = nn.Linear(hidden_size , num_classes)
#         if dr_rate:
#             self.dropout = nn.Dropout(p=dr_rate)
    
#     def gen_attention_mask(self, token_ids, valid_length):
#         attention_mask = torch.zeros_like(token_ids)
#         for i, v in enumerate(valid_length):
#             attention_mask[i][:v] = 1
#         return attention_mask.float()

#     def forward(self, token_ids, valid_length, segment_ids):
#         attention_mask = self.gen_attention_mask(token_ids, valid_length)
        
#         _, pooler = self.bert(input_ids = token_ids, token_type_ids = segment_ids.long(), attention_mask = attention_mask.float().to(token_ids.device))
#         if self.dr_rate:
#             out = self.dropout(pooler)
#         return self.classifier(out)

# model = BERTClassifier(bertmodel,  dr_rate=0.5).to(device)

# no_decay = ['bias', 'LayerNorm.weight']
# optimizer_grouped_parameters = [
#     {'params': [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},
#     {'params': [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}
# ]

# optimizer = AdamW(optimizer_grouped_parameters, lr=learning_rate)
# loss_fn = nn.CrossEntropyLoss()

# t_total = len(train_dataloader) * num_epochs
# warmup_step = int(t_total * warmup_ratio)

# scheduler = get_cosine_schedule_with_warmup(optimizer, num_warmup_steps=warmup_step, num_training_steps=t_total)

# def calc_accuracy(X,Y):
#     max_vals, max_indices = torch.max(X, 1)
#     train_acc = (max_indices == Y).sum().data.cpu().numpy()/max_indices.size()[0]
#     return train_acc

# train_dataloader

# 6. 모델 학습
# for e in range(num_epochs):
#     train_acc = 0.0
#     test_acc = 0.0
#     model.train()
#     for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(train_dataloader)):
#         optimizer.zero_grad()
#         token_ids = token_ids.long().to(device)
#         segment_ids = segment_ids.long().to(device)
#         valid_length= valid_length
#         label = label.long().to(device)
#         out = model(token_ids, valid_length, segment_ids)
#         loss = loss_fn(out, label)
#         loss.backward()
#         torch.nn.utils.clip_grad_norm_(model.parameters(), max_grad_norm)
#         optimizer.step()
#         scheduler.step()  # Update learning rate schedule
#         train_acc += calc_accuracy(out, label)
#         if batch_id % log_interval == 0:
#             print("epoch {} batch id {} loss {} train acc {}".format(e+1, batch_id+1, loss.data.cpu().numpy(), train_acc / (batch_id+1)))
#     print("epoch {} train acc {}".format(e+1, train_acc / (batch_id+1)))
    
#     model.eval()
#     for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(tqdm_notebook(test_dataloader)):
#         token_ids = token_ids.long().to(device)
#         segment_ids = segment_ids.long().to(device)
#         valid_length= valid_length
#         label = label.long().to(device)
#         out = model(token_ids, valid_length, segment_ids)
#         test_acc += calc_accuracy(out, label)
#     print("epoch {} test acc {}".format(e+1, test_acc / (batch_id+1)))

#토큰화
tokenizer = get_tokenizer()
tok = nlp.data.BERTSPTokenizer(tokenizer, vocab, lower=False)

def predict(predict_sentence):

    data = [predict_sentence, '0']
    dataset_another = [data]

    another_test = BERTDataset(dataset_another, 0, 1, tok, max_len, True, False)
    test_dataloader = torch.utils.data.DataLoader(another_test, batch_size=batch_size, num_workers=5)
    
    model.eval()

    for batch_id, (token_ids, valid_length, segment_ids, label) in enumerate(test_dataloader):
        token_ids = token_ids.long().to(device)
        segment_ids = segment_ids.long().to(device)

        valid_length= valid_length
        label = label.long().to(device)

        out = model(token_ids, valid_length, segment_ids)


        test_eval=[]
        for i in out:
            logits=i
            logits = logits.detach().cpu().numpy()

            if np.argmax(logits) == 0:
                test_eval.append("공포가")
            elif np.argmax(logits) == 1:
                test_eval.append("놀람이")
            elif np.argmax(logits) == 2:
                test_eval.append("분노가")
            elif np.argmax(logits) == 3:
                test_eval.append("슬픔이")
            elif np.argmax(logits) == 4:
                test_eval.append("중립이")
            elif np.argmax(logits) == 5:
                test_eval.append("행복이")
            elif np.argmax(logits) == 6:
                test_eval.append("혐오가")

        print(">> 입력하신 내용에서 " + test_eval[0] + " 느껴집니다.")
    
    predicted = test_eval[0]
    return predicted

def load_model(model_type):
    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
    model = torch.load('my_trainmodel3.pt', map_location=device)
   
    return model

#질문 무한반복하기! 0 입력시 종료
end = 1
while end == 1 :
    sentence = input("하고싶은 말을 입력해주세요 : ")
    if sentence == 'stop':
        break;
    predict(sentence)
    print("\n")

# 모델의 정보를 epoch과 함께 저장, 파일 명에 예시처럼 핵심 정보들을 적어주는 것이 일반적이다.
# torch.save({'epoch': e,
# 'model_state_dict': model.state_dict(),
# 'optimizer_state_dict': optimizer.state_dict()
# },
# f"saved/checkpoint_model_{e}_{epoch_loss/len(dataloader)}_{epoch_acc/len(dataloader)}.pt")

# 저장한 checkpoint 불러와 확인
# checkpoint = torch.load(PATH)
# model.load_state_dict(checkpoint['model_state_dict'])
# optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
# epoch = checkpoint['epoch']
# loss = checkpoint['loss']

# import torch
# import torch.nn as nn
# import torch.optim as optim

# import argparse

# class MyModel(nn.Module):
#     def __init__(self, input_dim):
#         super(MyModel, self).__init__()

#         self.input_dim = input_dim

#         self.linear = nn.Linear(input_dim, 1)

#     def forward(self, x):
#         return self.linear(x)

# def generate_data(input_dim, num_samples, num_batches):
#     x = torch.rand((num_samples, input_dim)).reshape(-1, num_batches, input_dim)
#     y = torch.randint(2, (num_samples,)).reshape(-1, num_batches).float()

#     return x, y

# if KoBERT == '__main__':
#     parser = argparse.ArgumentParser()
#     parser.add_argument('model')
#     parser.add_argument('/content/drive/MyDrive/kobert_0926')
#     parser.add_argument('64', '64', '0.1', '1', '1', '200', 5e-5, type=int)

#     args = parser.parse_args()

#     x, y = generate_data(args.input_dim, 3200, 32)

# if __name__ == '__main__':
#     parser = argparse.ArgumentParser()
#     parser.add_argument('model')
#     parser.add_argument('/content/drive/MyDrive/kobert_0926')
#     parser.add_argument('64', '64', '0.1', '1', '1', '200',' 5', type=int)

#     args = parser.parse_args()

#     x, y = generate_data(args.input_dim, 3200, 32)

# if args.resume_from:
#         # 저장했던 중간 모델 정보를 읽습니다.
#         model_data = torch.load(args.resume_from)

#         model = KoBERT(model_data['input_dim'])
#         # 저장했던 모델의 값들로 치환합니다.
#         model.load_state_dict(model_data['model_state_dict'])

#         optimizer = optim.Adam(model.parameters())
#         # optimizer도 중간에 저장했던 값들로 치환합니다.

#         optimizer.load_state_dict(model_data['optimizer_state_dict'])

#         # 지금 시작할 epoch은 기존 epoch + 1 즉 다음 epoch입니다.
#         start_epoch = model_data['epoch'] + 1
#     else:
#         model = KoBERT(args.input_dim)

#         optimizer = optim.Adam(model.parameters())

#         start_epoch = 1

